import React, { useState, useEffect } from 'react'
import Image from 'next/image';
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import formImage from '../public/form.png'
import { useFormik } from 'formik'
import * as Yup from 'yup'
import { useRouter } from 'next/router'
import Axios from 'axios'


export default function Home() {
  const [occupation, setOccupation] = useState('')
  const [state, setState] = useState('');

  const getResponseData = () => {
    Axios.get('https://frontend-take-home.fetchrewards.com/form')
      .then((response) => {
        console.log(response)
        const occupations = response.data.occupations;
        const states = response.data.states;
        setOccupation(occupations);
        setState(states);
      })
      .catch((e) => {
        alert('Error on page. Please reload to try again');
        console.log(e)
      });
  }

    useEffect(() => {
      getResponseData();
    }, []);
  
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      name: '',
      email: '',
      password: '',
      occupation: '',
      state: '',
    },

    validationSchema: Yup.object({
      name: Yup.string()
        .max(70, 'Name must be 70 characters or less')
        .matches(/[a-zA-Z]/, 'Name must only contain letters')
        .required('Please enter your name'),
      email: Yup.string()
        .email('Please enter a valid email address')
        .required('Please enter a valid email address'),
      password: Yup.string()
        .required('Please enter a valid Password')
        .min(8, 'Password is too short - should be 8 chars minimum.'),
      occupation: Yup.string().required('Please select your occupation'),
      state: Yup.string().required('Please select your state'),
    }),

    onSubmit: (values) => {
      Axios.post('https://frontend-take-home.fetchrewards.com/form', values)
        .then((response) => {
          router.push({ pathname: '/success', query: values });
          console.log(response)
        })
        .catch((e) => {
          console.log(e);
          alert('Error on page. Please review your info and try again.');
        });
    },
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>LE SAINT-ANDRE Sign-up </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="justify-center flex items-center h-screen">
        {/* form */}
        <form
          onSubmit={formik.handleSubmit}
          className="bg-white flex rounded-lg w-4/5"
        >
          <div className="flex-1 text-gray-700 p-5">
            <h1 className="text-3xl pb-2">
              LE SAINT-ANDRE
              <span> ☕️</span>
            </h1>
            <p className="text-lg text-gray-600">
              Register below to begin booking your parties reservations
            </p>

            <div className="mt-6" tabIndex={0}>
              {/* name */}
              <div className="pb-4">
                <label
                  className={`block text-sm pb-2 ${
                    formik.touched.name && formik.errors.name
                      ? 'text-red-600'
                      : ''
                  }`}
                  htmlFor="name"
                >
                  {formik.touched.name && formik.errors.name
                    ? formik.errors.name
                    : 'Full Name'}
                </label>
                <input
                  className="bg-white border-2 border-gray-600 p-2 rounded-md w-1/2"
                  type="text"
                  name="name"
                  placeholder="Full Name"
                  value={formik.values.name}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  required
                />
              </div>

              {/* email */}
              <div className="pb-4">
                <label
                  className={`block text-sm pb-2 ${
                    formik.touched.email && formik.errors.email
                      ? 'text-red-600'
                      : ''
                  }`}
                  htmlFor="email"
                >
                  {formik.touched.email && formik.errors.email
                    ? formik.errors.email
                    : 'Email'}
                </label>
                <input
                  className="bg-white border-2 border-gray-600 p-2 rounded-md w-1/2"
                  type="email"
                  name="email"
                  placeholder="Email"
                  value={formik.values.email}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  required
                />
              </div>

              {/* password */}
              <div className="pb-4">
                <label
                  className={`block text-sm pb-2 ${
                    formik.touched.password && formik.errors.password
                      ? 'text-red-600'
                      : ''
                  }`}
                  htmlFor="password"
                >
                  {formik.touched.password && formik.errors.password
                    ? formik.errors.password
                    : 'Password'}
                </label>
                <input
                  className="bg-white border-2 border-gray-600 p-2 rounded-md w-1/2"
                  type="password"
                  name="password"
                  required
                  placeholder="Password"
                  value={formik.values.password}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                />
              </div>

              {/* occupation */}
              <div className="pb-4">
                <label
                  className={`block text-sm pb-2 ${
                    formik.touched.occupation && formik.errors.occupation
                      ? 'text-red-600'
                      : ''
                  }`}
                  htmlFor="occupation"
                >
                  {formik.touched.occupation && formik.errors.occupation
                    ? formik.errors.occupation
                    : 'Occupation'}
                </label>
                <select
                  className="bg-white border-2 border-gray-600 p-2 rounded-md w-1/2 text-center"
                  name="occupation"
                  id="occupation"
                  value={formik.values.occupation}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  required
                >
                  <option>--Select Occupation--</option>
                  {Object.values(occupation).map((element) => (
                    <option key={element} value={occupation[element]}>
                      {element}
                    </option>
                  ))}
                </select>
              </div>

              {/* state */}
              <div className="pb-4">
                <label
                  className={`block text-sm pb-2 ${
                    formik.touched.state && formik.errors.state
                      ? 'text-red-600'
                      : ''
                  }`}
                  htmlFor="state"
                >
                  {formik.touched.state && formik.errors.state
                    ? formik.errors.state
                    : 'State'}
                </label>
                <select
                  className="bg-white border-2 border-gray-600 p-2 rounded-md w-1/2 text-center"
                  name="state"
                  id="state"
                  value={formik.values.state}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  required
                >
                  <option>-- Select State --</option>
                  {Object.assign(
                    Object.values(state).map((element, i) => (
                      <option key={i} value={state[element]}>
                        {element.name}
                      </option>
                    ))
                  )}
                </select>
              </div>

              {/* terms */}
              <div className="pb-4">
                <label className="block text-sm pb-2" htmlFor="terms">
                  Terms and Conditions
                </label>
                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    name="terms"
                    value="checked"
                    className="h-5 w-5 border-5"
                    required
                  />
                  <p className="text-sm text-gray-600">
                    I have read and agreeed to the <a> Terms and Conditions </a>
                  </p>
                </div>
              </div>

              {/* Sign-up button */}
              <button
                type="submit"
                className="button text-white text-sm py-3 mt-6 rounded-lg w-full"
              >
                Sign up!
              </button>
            </div>
          </div>

          {/* logo input field */}
          <div className="relative flex-1">
            <Image
              alt="LE SAINT-ANDRE logo"
              src={formImage}
              fill
              className="object-fill rounded-lg"
            />
          </div>
        </form>
      </main>
    </div>
  );
}


